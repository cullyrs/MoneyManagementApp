/**
 * Name : Arewa (Morountudun) Ojelade
 * Contributors : Cully Stearns
 * Date : 1/31/2025
 * File Name: category.js
 * Course : CMSC 495 Capstone in Computer Science
 * Project : Expense Tracker Capstone Project
 * Description : The purpose of the category.js module is to provide 
 * compact functions to interact with the Category collection of
 * the Expense Tracker Accounts database.
 */

//  DEPRECATED CODE
const Category = require('./models/Category.js');


/**
 * Function to add a category to the Category collection of the 
 * Expense Tracker Accounts database.
 * @param {String} name - The name of the associated Category instance. 
 * @returns {Object} The created instance of the category object.
 */
const addCategory = async(name)=>{  
        const count = await Category.where("version").equals("1").countDocuments();
        const category = await Category.create({
            categoryID : count,
            name : name
        });
        
        console.log(category);
        return category;
};
/**
 * Function to retrieve a category name from the Category collection of the 
 * Expense Tracker Accounts database.
 * @param {String} categoryID - The unique categoryID of the Category instance. 
 * @returns {String} The name of the category object.
 * Returns null if :
 *      1. Invalid categoryID is provided.
 */
const getCategoryName = async(categoryID)=>{
    const category = await Category.findOne({categoryID : categoryID});
    console.log(category);
    if(category){
        return category.name;
    }
    return null;
};
/**
 * Function to retrieve a category object from the Category collection of the 
 * Expense Tracker Accounts database.
 * @param {String} categoryID - The unique categoryID of the Category instance. 
 * @returns {Object} The category instance of the Category object.
 * Returns null if :
 *      1. Invalid categoryID is provided.
 */
const getCategoryObject = async(categoryID)=>{
    
    const category = await Category.findOne({categoryID : parseInt(categoryID)});
    if(category){
        return category;
    }
    return null;
};
/**
 * Function to initialize the Category collection of the 
 * Expense Tracker Accounts database with generic categories. 
 * Each category owns a unique _id generated by MongoDB, and 
 * a unique categoryID utilized for application purposes.
 */
const initializeCategories = async() =>{
    const names = ["All","Transportation","Housing","Vehicle","Life & Entertainment",
                "Food & Drinks", "Health & Body", "Professional Development", "Income","Investments"];
    var category;
    names.forEach((name,index)=>{
        category = addCategory(name);
        console.log(category);
    });
   
};
/**
 * Function to delete the categories by the specified version in the 
 * Expense Tracker Accounts database. This function is designed for
 * internal database maintainance and is not exported from the module.
 * @param {Int32} version - The version of Category instances to be deleted. 
 * @returns {Object} The  deleted instances of the categories that match specified version.
 */
const deleteCategories = async(version) =>{
   
    const deleted = await Category.deleteMany({version : version});
    return deleted;
};

/**
 * Function to delete a category by its name from the Expense Tracker Accounts database.
 * This function retrieves the category by name and, if found, deletes it from the database.
 * @param {String} categoryName - The name of the category to be deleted.
 * @returns {Object} The result of the deletion operation.
 * @throws {Error} Throws an error if the category is not found.
 */
const deleteCategory = async (categoryName) => {
  const category = await getCategoryByName(categoryName);
  if (!category) {
    throw new Error("Category not found");
  }
  const deleted = await Category.deleteOne({ categoryID: category.categoryID });
  return deleted;
};

/**
 * Function to retrieve a category by its name from the Expense Tracker Accounts database.
 * This function performs a case-insensitive search for the specified category name.
 * @param {String} name - The name of the category to be retrieved.
 * @returns {Object|null} The category document if found; otherwise, null.
 * @throws {Error} Throws an error if an invalid or empty name is provided.
 */
const getCategoryByName = async (name) => {
  if (!name || name.trim() === "") {
    throw new Error("A valid category name is required.");
  }
  const regex = new RegExp(`^${name.trim()}$`, "i");
  const category = await Category.findOne({ name: regex });
  return category;
};

module.exports = {initializeCategories, addCategory, getCategoryName,
        getCategoryObject, deleteCategories, deleteCategory, getCategoryByName
    };
